/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

/*
 * Challenge
 */

#define TRAPHANDLER_AUTO(name, num)							\
.data;														\
	.long name;												\
.text;					\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

#define TRAPHANDLER_NOEC_AUTO(name, num)					\
.data;												\
	.long name;										\
.text;					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.data
	.p2align 2
	.globl t_handler
t_handler:

#define PADDING()	\
.data;				\
	.long 0

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER_NOEC_AUTO(t_divide_handler, T_DIVIDE)
TRAPHANDLER_NOEC_AUTO(t_debug_handler, T_DEBUG)
TRAPHANDLER_NOEC_AUTO(t_nmi_handler, T_NMI)
TRAPHANDLER_NOEC_AUTO(t_brkpt_handler, T_BRKPT)
TRAPHANDLER_NOEC_AUTO(t_oflow_handler, T_OFLOW)
TRAPHANDLER_NOEC_AUTO(t_bound_handler, T_BOUND)
TRAPHANDLER_NOEC_AUTO(t_illop_handler, T_ILLOP)
TRAPHANDLER_NOEC_AUTO(t_device_handler, T_DEVICE)
TRAPHANDLER_AUTO(t_dblflt_handler, T_DBLFLT)
PADDING()/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
TRAPHANDLER_AUTO(t_tss_handler, T_TSS)
TRAPHANDLER_AUTO(t_segnp_handler, T_SEGNP)
TRAPHANDLER_AUTO(t_stack_handler, T_STACK)
TRAPHANDLER_AUTO(t_gpflt_handler, T_GPFLT)
TRAPHANDLER_AUTO(t_pgflt_handler, T_PGFLT)
PADDING()/* #define T_RES    15 */	// reserved
TRAPHANDLER_NOEC_AUTO(t_fperr_handler, T_FPERR)
TRAPHANDLER_AUTO(t_align_handler, T_ALIGN)
TRAPHANDLER_AUTO(t_mchk_handler, T_MCHK)
TRAPHANDLER_AUTO(t_simderr_handler, T_SIMDERR)
TRAPHANDLER_NOEC_AUTO(t_syscall_handler, T_SYSCALL)

/*
 * Lab 4: For IRQs
 */

TRAPHANDLER_NOEC_AUTO(irq_handler_0, 32)
TRAPHANDLER_NOEC_AUTO(irq_handler_1, 33)
TRAPHANDLER_NOEC_AUTO(irq_handler_2, 34)
TRAPHANDLER_NOEC_AUTO(irq_handler_3, 35)
TRAPHANDLER_NOEC_AUTO(irq_handler_4, 36)
TRAPHANDLER_NOEC_AUTO(irq_handler_5, 37)
TRAPHANDLER_NOEC_AUTO(irq_handler_6, 38)
TRAPHANDLER_NOEC_AUTO(irq_handler_7, 39)
TRAPHANDLER_NOEC_AUTO(irq_handler_8, 40)
TRAPHANDLER_NOEC_AUTO(irq_handler_9, 41)
TRAPHANDLER_NOEC_AUTO(irq_handler_10, 42)
TRAPHANDLER_NOEC_AUTO(irq_handler_11, 43)
TRAPHANDLER_NOEC_AUTO(irq_handler_12, 44)
TRAPHANDLER_NOEC_AUTO(irq_handler_13, 45)
TRAPHANDLER_NOEC_AUTO(irq_handler_14, 46)
TRAPHANDLER_NOEC_AUTO(irq_handler_15, 47)

/*
 * Lab 3: Your code here for _alltraps
 */

_alltraps:
	pushl %ds
	pushl %es
	pushal
	movl $GD_KD, %eax
	movl %eax, %ds
	movl %eax, %es
	pushl %esp
	call trap
